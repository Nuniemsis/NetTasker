# This workflow will install Python dependencies using Poetry, run tests, and lint for Python 3.10
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: mydatabase
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        export PATH="$HOME/.local/bin:$PATH"
    - name: Install dependencies
      working-directory: fastapi-task-app
      run: |
        poetry install
    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$PWD/fastapi-task-app" >> $GITHUB_ENV
    - name: Lint with flake8
      working-directory: fastapi-task-app
      run: |
        # stop the build if there are Python syntax errors or undefined names
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      working-directory: fastapi-task-app
      env:
        DATABASE_URL: "postgresql://test_user:test_password@localhost:5432/mydatabase"
        DB_USER: myuser
        DB_PASSWORD: mypassword
        DB_HOST: localhost
        DB_PORT: "5432"
        DB_NAME: mydatabase
      run: |
        poetry run pytest

    - name: Export Dependencies
      working-directory: fastapi-task-app
      run: |
        poetry export --without-hashes -f requirements.txt -o requirements.txt

    - name: Run Safety Check
      working-directory: fastapi-task-app
      run: |
        pip install safety
        safety check -r requirements.txt

    - name: Run pip-audit
      working-directory: fastapi-task-app
      run: |
        pip install pip-audit
        pip-audit -r requirements.txt